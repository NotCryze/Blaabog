@page
@model SBO.BlaaBog.Web.Pages.RegisterModel
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Microsoft.AspNetCore.Mvc
@{
    ViewData["Title"] = "Student Register";
}

<div class="container">
    <div class="col-md-4 offset-md-4">
        <h2 class="mb-4 text-center">Register</h2>

        <ul class="nav nav-tabs">

            <li class="nav-item w-50 text-center">
                <a class="nav-link active" aria-current="page" asp-page="/Register">Student</a>
            </li>
            <li class="nav-item w-50 text-center">
                <a class="nav-link text-reset" asp-page="/Teachers/Register">Teacher</a>
            </li>

        </ul>

        <div class="card p-4 card-fix-top">

            <div class="text-center">
                <h3>Welcome!</h3>
            </div>

            <form method="post">
                <div class="mb-3">
                    <label for="token" class="form-label col">Token</label>
                    <input type="text" asp-for="Register.Token" value="@Model.Register.Token" class="form-control @(ModelState.GetFieldValidationState("Register.Token") == ModelValidationState.Invalid ? "is-invalid" : ModelState.GetValidationState("Register.Token") == ModelValidationState.Valid ? "is-valid" : "")" id="token" placeholder="Token" required>
                    <span asp-validation-for="Register.Token" class="invalid-feedback"></span>

                </div>
                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <input type="text" asp-for="Register.Name" value="@Model.Register.Name" class="form-control @(ModelState.GetFieldValidationState("Register.Name") == ModelValidationState.Invalid ? "is-invalid" : ModelState.GetValidationState("Register.Name") == ModelValidationState.Valid ? "is-valid" : "")" id="name" placeholder="Name" required>
                    <span asp-validation-for="Register.Name" class="invalid-feedback"></span>
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <input type="email" asp-for="Register.Email" value="@Model.Register.Email" class="form-control @(ModelState.GetFieldValidationState("Register.Email") == ModelValidationState.Invalid ? "is-invalid" : ModelState.GetValidationState("Register.Email") == ModelValidationState.Valid ? "is-valid" : "")" id="email" placeholder="Email" required>
                    <span asp-validation-for="Register.Email" class="invalid-feedback"></span>
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <input type="password" asp-for="Register.Password" value="@Model.Register.Password" class="form-control @(ModelState.GetFieldValidationState("Register.Password") == ModelValidationState.Invalid ? "is-invalid" : ModelState.GetValidationState("Register.Password") == ModelValidationState.Valid ? "is-valid" : "")" id="password" placeholder="Password" required>
                    <span asp-validation-for="Register.Password" class="invalid-feedback"></span>
                </div>

                <button type="submit" class="btn btn-primary w-100">Register</button>
            </form>

            <p class="mt-3 text-center">Already have an account? <a asp-page="/Login">Login</a></p>
        </div>
    </div>
</div>